/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;
import Utils.DateHelper;
import Utils.Validator;
import component.MessageBox;
import controller.LogsController;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import model.objects.LogO;
import model.objects.LogsDB;
import javax.swing.*;
import javax.swing.event.MouseInputAdapter;
import java.awt.event.MouseEvent;
import javax.swing.table.JTableHeader;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import model.objects.TypesDB;
/**
 *
 * @author sidac
 */
public class testLogFrame extends javax.swing.JFrame {

    /**
     * Creates new form testLogFrame
     */
    public testLogFrame() {
        initValues();
        initComponents();
        setSize(800, 500);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dateValueLabel = new javax.swing.JLabel();
        contentWrapper = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionText = new javax.swing.JTextArea();
        amountValueLabel = new javax.swing.JTextField();
        addDataBtn = new javax.swing.JButton();
        nextDateBtn = new javax.swing.JButton();
        previousDateBtn = new javax.swing.JButton();
        totalInDayLabel = new javax.swing.JLabel();
        totalInDayValueLabel = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        logTable = new javax.swing.JTable();
        deleteBtn = new javax.swing.JButton();
        backActionBtn = new javax.swing.JButton();
        nextActionBtn = new javax.swing.JButton();
        dateChooserLabel = new javax.swing.JLabel();
        fromDateValueLabel = new javax.swing.JTextField();
        toDateValueLabel = new javax.swing.JTextField();
        totalRowCountLabel = new javax.swing.JLabel();
        amounChoosertLabel = new javax.swing.JLabel();
        fromAmountValueLabel = new javax.swing.JTextField();
        toAmountValueLabel = new javax.swing.JTextField();
        filterActionBtn = new javax.swing.JButton();
        sortBtn = new javax.swing.JButton();
        typeChooserCombox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        itemTypeLabel = new javax.swing.JLabel();
        typeOfSortValueBtn = new javax.swing.JButton();
        testText = new javax.swing.JLabel();
        typeChooserCom = new javax.swing.JComboBox<>();
        typeCombox = new javax.swing.JComboBox<>();

        //Khởi tạo các giá trị cần thiết
        setInitValues();

        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel1.setLayout(null);

        jLabel1.setText("Ngày:");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(-1, 4, 40, 20);

        dateValueLabel.setText(this.curDateValue);
        jPanel1.add(dateValueLabel);
        dateValueLabel.setBounds(44, 4, 50, 20);

        contentWrapper.setLayout(null);

        descriptionText.setColumns(20);
        descriptionText.setRows(5);
        jScrollPane1.setViewportView(descriptionText);

        contentWrapper.add(jScrollPane1);
        jScrollPane1.setBounds(30, 10, 150, 80);

//        amountValueLabel.setText("jTextField1");
        contentWrapper.add(amountValueLabel);
        amountValueLabel.setBounds(30, 90, 60, 20);

        addDataBtn.setText("Thêm");
        addDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDataBtnActionPerformed(evt);
            }
        });
        contentWrapper.add(addDataBtn);
        addDataBtn.setBounds(70, 110, 59, 23);
        
        typeCombox.setModel(new javax.swing.DefaultComboBoxModel<>(types.getTypeNames()));
        contentWrapper.add(typeCombox);
        typeCombox.setBounds(120, 90, 57, 20);
        
        jPanel1.add(contentWrapper);
        contentWrapper.setBounds(30, 50, 200, 140);

        nextDateBtn.setText("jButton1");
        nextDateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextDateBtnActionPerformed(evt);
            }
        });
        jPanel1.add(nextDateBtn);
        nextDateBtn.setBounds(100, 0, 20, 23);

        previousDateBtn.setText("jButton2");
        previousDateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousDateBtnActionPerformed(evt);
            }
        });
        jPanel1.add(previousDateBtn);

        previousDateBtn.setBounds(100, 20, 20, 23);

        totalInDayLabel.setText("Tổng:");
        jPanel1.add(totalInDayLabel);
        totalInDayLabel.setBounds(148, 4, 30, 20);

        totalInDayValueLabel.setText(this.totalInUnitTime.toString());
        jPanel1.add(totalInDayValueLabel);
        totalInDayValueLabel.setBounds(190, 4, 40, 20);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(60, 40, 250, 210);

        logTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Mục", "Số tiền", "Ghi chú", "Thời gian", "Chọn"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JTableHeader header = logTable.getTableHeader();
        header.addMouseListener(new MouseInputAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int columnIndex = header.columnAtPoint(e.getPoint());
                if (columnIndex == 5) {
                    // Xử lý sự kiện click vào header của cột 5 ở đây
                    toggleDeleteAll();
                }
            }
        });
        this.fillLogTable();
        logTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logTableMouseClicked(evt);
            }
        });
        jScrollPane.setViewportView(logTable);

        getContentPane().add(jScrollPane);
        jScrollPane.setBounds(330, 50, 360, 120);
        
        deleteBtn.setText("Xóa");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });
        getContentPane().add(deleteBtn);
        deleteBtn.setBounds(330, 200, 51, 23);
                backActionBtn.setText("<");
        backActionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionBtnActionPerformed(evt);
            }
        });
        getContentPane().add(backActionBtn);
        backActionBtn.setBounds(330, 30, 41, 23);

        nextActionBtn.setText(">");
        nextActionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionBtnActionPerformed(evt);
            }
        });
        getContentPane().add(nextActionBtn);
        nextActionBtn.setBounds(370, 30, 41, 23);

        dateChooserLabel.setText("Ngày:");
        getContentPane().add(dateChooserLabel);
        dateChooserLabel.setBounds(410, 190, 40, 14);

//        fromDateValueLabel.setText("jTextField1");
        getContentPane().add(fromDateValueLabel);
        fromDateValueLabel.setBounds(460, 190, 90, 20);
        
        fromDateValueLabel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                if (!Validator.isDateString(fromDateValueLabel.getText())){
                    MessageBox.showWrongDateFormat(rootPane);
                    fromDateValueLabel.grabFocus();
                };
            }
        });

//        toDateValueLabel.setText("jTextField2");
        getContentPane().add(toDateValueLabel);
        toDateValueLabel.setBounds(590, 190, 90, 20);
        toDateValueLabel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                if (!Validator.isDateString(toDateValueLabel.getText())){
                    MessageBox.showWrongDateFormat(rootPane);
                    toDateValueLabel.grabFocus();
                };


            }
        });
        totalRowCountLabel.setText("jLabel3");
        getContentPane().add(totalRowCountLabel);
        totalRowCountLabel.setBounds(650, 30, 34, 14);

        amounChoosertLabel.setText("Số tiền: ");
        getContentPane().add(amounChoosertLabel);
        amounChoosertLabel.setBounds(410, 230, 50, 14);

//        fromAmountValueLabel.setText("jTextField1");
        fromAmountValueLabel.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromAmountValueLabelActionPerformed(evt);
            }
        });
//        fromAmountValueLabel.getDocument().addDocumentListener(new DocumentListener() {
//            @Override
//            public void insertUpdate(DocumentEvent e) {
//                // Xử lý khi có sự thay đổi (chèn)
//                handleEditEvent();
//            }
//
//            @Override
//            public void removeUpdate(DocumentEvent e) {
//                // Xử lý khi có sự thay đổi (xóa)
//                handleEditEvent();
//            }
//
//            @Override
//            public void changedUpdate(DocumentEvent e) {
//                // Xử lý khi có sự thay đổi (thay đổi)
//                handleEditEvent();
//            }
//            
//            
//        });
        
        //Nhập xong out ra textfield này thì sẽ kiểm tra, nếu có lỗi thì hiện message rồi yêu cầu nhập lại
        fromAmountValueLabel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                if (!Validator.isNumeric(fromAmountValueLabel.getText()) && !fromAmountValueLabel.getText().equals("")){
                    MessageBox.showNotNumErr(rootPane);
                    fromAmountValueLabel.grabFocus();
                };


            }
        });

        getContentPane().add(fromAmountValueLabel);
        fromAmountValueLabel.setBounds(460, 230, 90, 20);

//        toAmountValueLabel.setText("jTextField2");
        getContentPane().add(toAmountValueLabel);
        toAmountValueLabel.setBounds(590, 230, 90, 20);

        toAmountValueLabel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                if (!Validator.isNumeric(toAmountValueLabel.getText()) && !toAmountValueLabel.getText().equals("")){
                    MessageBox.showNotNumErr(rootPane);
                    toAmountValueLabel.grabFocus();
                };


            }
        });
        
        getContentPane().add(testText);
        testText.setBounds(730, 30, 110, 14);
        
        filterActionBtn.setText("Lọc");
        filterActionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterActionBtnActionPerformed(evt);
            }
        });
        getContentPane().add(filterActionBtn);
        filterActionBtn.setBounds(330, 230, 50, 23);

        sortBtn.setText("Sắp xếp");
        sortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortBtnActionPerformed(evt);
            }
        });
        getContentPane().add(sortBtn);
        sortBtn.setBounds(310, 260, 80, 23);

        typeChooserCombox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ngày", "Số tiền"}));
        getContentPane().add(typeChooserCombox);
        typeChooserCombox.setBounds(460, 260, 57, 20);
        typeChooserCombox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeChooserComboxActionPerformed(evt);
            }
        });
        
        jLabel4.setText("jLabel4");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(670, 50, 34, 14);

        itemTypeLabel.setText("Mục:");
        getContentPane().add(itemTypeLabel);
        itemTypeLabel.setBounds(410, 260, 23, 14);

        typeOfSortValueBtn.setText(this.typeOfSortText);
        getContentPane().add(typeOfSortValueBtn);
        typeOfSortValueBtn.setBounds(590, 260, 50, 23);
        
        typeOfSortValueBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeOfSortValueBtnActionPerformed(evt);
            }
        });
        
        typeChooserCom.setModel(new javax.swing.DefaultComboBoxModel<>(types.getTypeNames("Tất cả")));
        getContentPane().add(typeChooserCom);
        typeChooserCom.setBounds(720, 190, 57, 20);
        pack();
    }// </editor-fold>                        

    
    private void initValues(){
        this.curDateValue = Utils.DateHelper.getCurrentDateFormatted();
        this.logsController = new LogsController();
        this.conditionsForFilter = new Vector<Object[]>();
        
        //Thêm điều kiện filter theo ngày
        this.conditionsForFilter.add(new Object[]{"date",DateHelper.getCurrentDateFormatted(), "from"});
        this.conditionsForFilter.add(new Object[]{"date",DateHelper.getCurrentDateFormatted(), "to"});
        
        this.logsController = new LogsController();
        
        this.logsController.filter(conditionsForFilter, conditionsForSort);
        
        this.totalInUnitTime = this.logsController.getTotalAmountInDay();
        
        this.types.setTypes();
        
    }
    
    private void setInitValues(){
        //Date
        this.startDateValue = Utils.DateHelper.getCurrentDateFormatted();
        this.endDateValue = Utils.DateHelper.getCurrentDateFormatted();
        this.fromDateValueLabel.setText(this.startDateValue);
        this.toDateValueLabel.setText(this.startDateValue);
        
        //Amount
        this.fromAmountValueLabel.setText("");
        this.toAmountValueLabel.setText("");
        
        this.typeOfSort = 0;
        this.typeOfSortText = "A-Z";
    }
    private void addDataBtnActionPerformed(java.awt.event.ActionEvent evt) {                                           
        String note = this.descriptionText.getText();
        BigDecimal amount = new BigDecimal(this.amountValueLabel.getText());
        this.logsController.addLog(new LogO(this.typeCombox.getSelectedItem().toString(), this.types.findId(this.typeCombox.getSelectedItem().toString()), this.idUser, amount, note, this.curDateValue), 1);
        this.logsController.printLogs();
        this.refreshState();
        // TODO add your handling code here:
    }                            
    private void nextDateBtnActionPerformed(java.awt.event.ActionEvent evt) {
        this.curDateValue = DateHelper.getDateFormattedWithOffset(curDateValue, "d", 1);
        this.dateValueLabel.setText(this.curDateValue);
        LogsDB log =  new LogsDB();
        this.conditionsForFilter.removeAllElements();
        this.conditionsForFilter.add(new Object[]{"date", this.dateValueLabel.getText(), "from"});
        this.conditionsForFilter.add( new Object[]{"date", this.dateValueLabel.getText(), "to"});
        logsController.filter(conditionsForFilter, conditionsForSort);
        this.refreshState();
        
    }                                           
    
    /**
     * Đổi ngày (trước curDate 1 day)
     * @param evt 
     */
    private void previousDateBtnActionPerformed(java.awt.event.ActionEvent evt) {                                                
        LogsDB log = new LogsDB();
        this.curDateValue = DateHelper.getDateFormattedWithOffset(curDateValue, "d", -1);
        this.dateValueLabel.setText(this.curDateValue);
        this.conditionsForFilter.removeAllElements();
        this.conditionsForFilter.add(new Object[]{"date", this.dateValueLabel.getText(), "from"});
        this.conditionsForFilter.add(new Object[]{"date", this.dateValueLabel.getText(), "to"});
        logsController.filter(conditionsForFilter, conditionsForSort);
        this.refreshState();
    }  


    
    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {                                          
        Vector<Integer> idList = new Vector<Integer>();
        LogsDB logs = new LogsDB();
        for (int i  =0; i < logTable.getRowCount(); i++){
            // Chọn các hàng được chọn
            if (logTable.getValueAt(i, 5) != null && (boolean)logTable.getValueAt(i, 5) == true){
                int id = (int)logTable.getValueAt(i, 0);
                idList.add(id);
            }
        }
        logs.deleteLogs(idList);
        this.refreshState();
    } 
    
    private void backActionBtnActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void nextActionBtnActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void fromAmountValueLabelActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        // TODO add your handling code here:
    }      
    private void typeChooserComboxActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        // TODO add your handling code here:
    }   
    
    private void filterActionBtnActionPerformed(java.awt.event.ActionEvent evt) {                                                
        this.conditionsForFilter.clear();
        this.conditionsForSort.clear();
        
        //cập nhật lại value của date filter
        this.startDateValue = this.fromDateValueLabel.getText();
        this.endDateValue = this.toDateValueLabel.getText();
        
        this.conditionsForFilter = this.getConditionForFilter();
        this.conditionsForSort = this.getConditionForSort();
        
        this.refreshState();
    }
    
    private void typeOfSortValueBtnActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        if (this.typeOfSort == 0){
            this.typeOfSort = 1;
            this.typeOfSortText = "DESC";
        }
        else if (this.typeOfSort == 1){
            this.typeOfSort = 0;
            this.typeOfSortText = "ASC";
        }
        this.typeOfSortValueBtn.setText(this.typeOfSortText);
        this.refreshState();

    }  
    
    private Vector<Object[]> getConditionForFilter(){
        Vector<Object[]> ans = new Vector<>();
        
        if (DateHelper.isDateStringAvailable(this.startDateValue)){
            ans.add(new Object[]{"date", this.startDateValue, "from"});
        }
        
        if (DateHelper.isDateStringAvailable(this.endDateValue)){
            ans.add(new Object[]{"date", this.endDateValue, "to"});
        }
        
        //Lấy giá trị của fromAmount để lọc
        if (this.fromAmountValueLabel.getText().equals("")){
            
        }
        else if (!Validator.isNumeric(fromAmountValueLabel.getText()) ){
            MessageBox.showError(this, "Vui lòng nhập số vào trường Textfield.");
        }
        else {
            ans.add(new Object[]{"price", this.fromAmountValueLabel.getText(), "from"});
        }
        
        //Lấy giá trị của toAmount để lọc
        if (this.toAmountValueLabel.getText().equals("")){
            
        }
        else if (!Validator.isNumeric(toAmountValueLabel.getText()) ){
            MessageBox.showError(this, "Vui lòng nhập số vào trường Textfield.");
        }
        else {
            ans.add(new Object[]{"price", this.toAmountValueLabel.getText(), "to"});
        }
        
        if (!this.typeChooserCom.getSelectedItem().toString().equals("Tất cả")){
            ans.add(new Object[]{"type", types.findId(this.typeChooserCom.getSelectedItem().toString()), "exact"});
        }
        
        return ans;
    }

    
    private Vector<Object[]> getConditionForSort(){
        Vector<Object[]> ans = new Vector<>();
        String sortType = "";
        String colToSort = "";
        //Lấy name colToSort
        if (this.typeChooserCombox.getSelectedItem() == "Ngày"){
            colToSort = "date";
        }
        else if (this.typeChooserCombox.getSelectedItem() == "Số tiền"){
            colToSort = "price";
        }
        
        //Lấy kiểu sort
        if (this.typeOfSort == 0){
            sortType = "ASC";
        }
        else if (this.typeOfSort == 1){
            sortType = "DESC";
        }
        ans.add(new Object[]{colToSort, sortType});

        return ans;
    }
    
                                                

    private void sortBtnActionPerformed(java.awt.event.ActionEvent evt) {                                        
        this.conditionsForSort.clear();
        String sortType = "";
        if (this.typeOfSort == 0){
            sortType = "ASC";
        }
        else if (this.typeOfSort == 1){
            sortType = "DESC";
        }
        this.conditionsForSort.add(new Object[]{"price", sortType});
        this.refreshState();
    }  
    
    private void logTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logTableMouseClicked
        DefaultTableModel model = (DefaultTableModel) logTable.getModel();
        int row = logTable.getSelectedRow();
        int id = (int)model.getValueAt(row, 0);
        BigDecimal amount = new BigDecimal("0");
        try {
            amount = (BigDecimal) model.getValueAt(row, 2);
            System.out.print(amount);
        }
        catch(Exception e){
            amount = new BigDecimal((String)model.getValueAt(row, 2));
        }
        
        this.changeList.add(id);
        this.logsController.updateDataRow(id, (String)model.getValueAt(row, 3), amount);
        this.logsController.updateLogWitdID(id);


    }//GEN-LAST:event_logTableMouseClicked
    
    
    private String getDateValueLabel(){
        if (this.startDateValue.equals(this.endDateValue)){
            return this.startDateValue;
        }
        else{
            return this.startDateValue + " - " + this.endDateValue;
        }
    }
    
    private void refreshState(){
        this.logsController.filter(this.conditionsForFilter, this.conditionsForSort);
        this.fillLogTable();
        this.totalInUnitTime = this.logsController.getTotalAmountInDay();
        this.totalInDayValueLabel.setText(this.totalInUnitTime.toString());
        this.testText.setText(this.getDateValueLabel());

    }
    
    private void toggleDeleteAll(){
        this.isDeleteAllActive = !this.isDeleteAllActive;
        for (int i  =0; i < logTable.getRowCount(); i++){
            // Chọn các hàng được chọn
            logTable.setValueAt(this.isDeleteAllActive, i, 5);
        }
    }

    

    private void fillLogTable(){
        DefaultTableModel model = (DefaultTableModel) logTable.getModel();
        model.setRowCount(0);
        Object[][] tableData = logsController.logDataToTable(rowLogTableStructure);
        for (Object[] item : tableData) {
            model.addRow(item);
        }
    }  

    private void handleEditEvent(){
        if (!Validator.isNumeric(this.fromAmountValueLabel.getText())){
            MessageBox.showError(rootPane, "Lỗi nhập số.");
        }
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(testLogFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(testLogFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(testLogFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(testLogFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new testLogFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton addDataBtn;
    private javax.swing.JLabel amounChoosertLabel;
    private javax.swing.JTextField amountValueLabel;
    private javax.swing.JButton backActionBtn;
    private javax.swing.JPanel contentWrapper;
    private javax.swing.JLabel dateChooserLabel;
    private javax.swing.JLabel dateValueLabel;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTextArea descriptionText;
    private javax.swing.JButton filterActionBtn;
    private javax.swing.JTextField fromAmountValueLabel;
    private javax.swing.JTextField fromDateValueLabel;
    private javax.swing.JLabel itemTypeLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JTable logTable;
    private javax.swing.JButton nextActionBtn;
    private javax.swing.JButton nextDateBtn;
    private javax.swing.JButton previousDateBtn;
    private javax.swing.JButton sortBtn;
    private javax.swing.JTextField toAmountValueLabel;
    private javax.swing.JTextField toDateValueLabel;
    private javax.swing.JLabel totalInDayLabel;
    private javax.swing.JLabel totalInDayValueLabel;
    private javax.swing.JLabel totalRowCountLabel;
    private javax.swing.JComboBox<String> typeChooserCombox;
    private javax.swing.JButton typeOfSortValueBtn;
    private javax.swing.JLabel testText;
    private javax.swing.JComboBox<String> typeChooserCom;
    private javax.swing.JComboBox<String> typeCombox;

    private DateHelper dateHelper = new DateHelper();
    private int idUser = 0;
    private int mode = 0;
    private String curDateValue;
    private String startDateValue;
    private String endDateValue;
    private LogsController logsController;
    private Vector<Integer> changeList;
    private Vector<Object[]> conditionsForFilter = new Vector<>();
    private Vector<Object[]> conditionsForSort = new Vector<>();
    private final String[] rowLogTableStructure = new String[]{"id", "idOfItemInCategory", "price", "note", "date"};
    private boolean isDeleteAllActive = false;
    private BigDecimal totalInUnitTime;
    private LogsDB logs = new LogsDB();
    private int typeOfSort = 0;
    private String typeOfSortText;
    private String typeStringQuery = "all";
    private TypesDB types = new TypesDB();
    // End of variables declaration                   
}
